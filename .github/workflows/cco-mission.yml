name: CCO Mission Execution

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to convert to mission'
        required: false
        type: number
      mission_file:
        description: 'Mission file path'
        required: false
        default: ''
        type: string

jobs:
  check-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      issue_number: ${{ steps.check.outputs.issue_number }}
    steps:
      - name: Check trigger
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            if [[ "${{ github.event.comment.body }}" == "/cco run"* ]]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  execute-mission:
    needs: check-trigger
    if: needs.check-trigger.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm run build
      
      - name: Configure Git
        run: |
          git config --global user.name "CCO Bot"
          git config --global user.email "cco-bot@example.com"
      
      - name: Initialize CCO
        run: |
          npx . init
          
          # Update config for GitHub Actions
          cat > .cco/config.yaml << EOF
          orchestrator:
            mode: "single_instance"
            max_iterations: 10
            checkpoint_interval: 2
            
          repository:
            path: "."
            auto_commit: false
            
          openrouter:
            api_key: \${OPENROUTER_API_KEY}
            model: "openai/gpt-3.5-turbo"
            temperature: 0.3
            
          claude_code:
            use_subscription: true
            use_sdk: true
            workspace: "."
            
          persistence:
            type: "file"
            path: ".cco/sessions"
            
          monitoring:
            log_level: "INFO"
            log_path: ".cco/logs"
          EOF
      
      - name: Create mission from issue
        if: needs.check-trigger.outputs.issue_number != ''
        id: create_mission
        run: |
          cat > parse-issue.js << 'EOF'
          const { GitHubClient } = require('./dist/integrations/github/github-client.js');
          const { GitHubIssueParser } = require('./dist/integrations/github/issue-parser.js');
          const { createLogger } = require('./dist/monitoring/logger.js');
          const fs = require('fs/promises');
          const yaml = require('js-yaml');
          
          async function main() {
            const logger = createLogger();
            const issueNumber = process.argv[2];
            
            const githubClient = new GitHubClient({
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}',
              token: '${{ secrets.GITHUB_TOKEN }}'
            }, logger);
            
            const parser = new GitHubIssueParser(githubClient, logger);
            const mission = await parser.parseIssueToMission(parseInt(issueNumber));
            
            // Convert to mission file format
            const missionFile = {
              mission: {
                title: mission.title,
                description: mission.description,
                repository: mission.repository,
                priority: 'high',
                definition_of_done: mission.definitionOfDone.map(dod => ({
                  id: dod.id,
                  description: dod.description,
                  type: 'functional',
                  measurable: dod.measurable,
                  priority: dod.priority
                })),
                phases: [{
                  name: 'implementation',
                  description: 'Complete all DoD criteria',
                  dod_criteria: mission.definitionOfDone.map(d => d.id),
                  estimated_time: '30m'
                }]
              }
            };
            
            await fs.writeFile('mission.yaml', yaml.dump(missionFile));
            console.log('Mission file created');
          }
          
          main().catch(console.error);
          EOF
          
          node parse-issue.js ${{ needs.check-trigger.outputs.issue_number }}
      
      - name: Use provided mission file
        if: github.event.inputs.mission_file != ''
        run: |
          cp ${{ github.event.inputs.mission_file }} mission.yaml
      
      - name: Execute CCO Mission
        id: execute
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Run with timeout
          timeout 600 npx . start --mission mission.yaml || true
          
          # Check if any files were modified
          if [[ -n $(git status --porcelain) ]]; then
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.execute.outputs.files_changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'feat: automated changes from CCO mission'
          title: '[CCO] Automated mission execution'
          body: |
            ## ü§ñ Automated CCO Mission
            
            This pull request was automatically generated by Claude Code Orchestrator.
            
            ### Mission Details
            - **Triggered by**: ${{ github.event_name }}
            - **Issue**: #${{ needs.check-trigger.outputs.issue_number }}
            - **Workflow run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Files Changed
            See the files tab for all modifications.
            
            ---
            *Please review the changes carefully before merging.*
          branch: cco/mission-${{ github.run_id }}
          delete-branch: true
          labels: |
            cco-generated
            automated
      
      - name: Comment on issue
        if: needs.check-trigger.outputs.issue_number != '' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ needs.check-trigger.outputs.issue_number }};
            const success = '${{ steps.execute.outputs.files_changed }}' === 'true';
            
            let comment = '## ü§ñ CCO Mission ';
            comment += success ? 'Completed' : 'Executed';
            comment += '\n\n';
            
            if (success) {
              comment += '‚úÖ Mission executed successfully and a pull request has been created.\n\n';
              comment += 'Please review the changes in the pull request.';
            } else {
              comment += '‚ö†Ô∏è Mission executed but no changes were made.\n\n';
              comment += 'This could mean:\n';
              comment += '- The task is already complete\n';
              comment += '- The mission needs clarification\n';
              comment += '- There was an error during execution';
            }
            
            comment += '\n\n[View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });