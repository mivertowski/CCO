name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Type check
        run: npm run typecheck
      
      - name: Run tests
        run: npm test
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/cli/index.js" ]; then
            echo "Build failed: CLI entry point not found"
            exit 1
          fi
      
      - name: Test CLI execution
        run: |
          node dist/cli/index.js --version || true
          node dist/cli/index.js --help

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run integration tests
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_TEST_KEY }}
          NODE_ENV: test
        run: |
          # Test CLI initialization
          npx . init
          
          # Test mission parsing
          cat > test-mission.yaml << EOF
          mission:
            title: "Test Mission"
            repository: "."
            description: "Test"
            definition_of_done:
              - criteria: "Test criterion"
                measurable: true
                priority: "high"
          EOF
          
          # Verify mission file is valid
          node -e "
            const fs = require('fs');
            const yaml = require('js-yaml');
            const content = fs.readFileSync('test-mission.yaml', 'utf8');
            const mission = yaml.load(content);
            if (!mission.mission) throw new Error('Invalid mission');
            console.log('Mission valid');
          "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified

  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, build, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Check package version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $PACKAGE_VERSION"
      
      - name: Check if version exists on npm
        run: |
          if npm view cco-cli@${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "Version ${{ steps.version.outputs.version }} already exists on npm"
          else
            echo "Version ${{ steps.version.outputs.version }} is new and can be published"
          fi